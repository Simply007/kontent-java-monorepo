plugins {
    id "io.franzbecker.gradle-lombok" version "1.14"
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'


dependencies {
    implementation("org.slf4j:slf4j-api:1.7.25")

    implementation("com.fasterxml.jackson.core:jackson-core:2.8.9")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.8.9")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.4.0")

    implementation("commons-beanutils:commons-beanutils:1.9.3")
    implementation("io.github.classgraph:classgraph:4.2.12")

    implementation("com.squareup.okhttp3:okhttp:4.5.0")

    compileOnly("org.thymeleaf:thymeleaf:3.0.0.RELEASE")
    testCompile("org.thymeleaf:thymeleaf:3.0.0.RELEASE")

    testCompile("junit:junit:4.12")
    testCompile("org.apache.httpcomponents:httpclient:4.5.3:tests")
    testCompile("org.apache.httpcomponents:httpclient:4.5.3")
}

lombok {
    version = "1.18.2"
    sha256 = ""
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

import io.franzbecker.gradle.lombok.task.DelombokTask
task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each { dir ->
        inputs.dir(dir)
        args(dir, "-d", outputDir)
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

def pomConfig = {
    developers {
        developer {
            id 'ondrejch'
            name 'Ondrej Chrastina'
            email 'ondrej.chrastina@kentico.com'
        }
    }
    licenses {
        license {
            name "MIT"
            url "https://github.com/Simply007/kontent-java-monorepo/blob/master/LICENSE.md"
            distribution "repo"
        }
    }
    scm {
        url "git@github.com:Simply007/kontent-java-monorepo.git"
    }
}

publishing {
    publications {
        BintrayPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifactId = 'kontent-delivery'
            groupId = repoGroupId
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Java client around Kentico Kontent Delivery REST API.')
                root.appendNode('name', 'Kontent Delivery SDK client.')
                root.appendNode('url', 'https://kontent.ai')
                root.children().last() + pomConfig
            }
        }
    }
}

// TODO adjust before final release
bintray {
    user = bintrayUser
    key = bintrayKey
    publications = ['BintrayPublication']
    pkg {
        repo = 'kontent-java-monorepo'
        name = 'kontent-delivery'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/bintray/gradle-bintray-plugin.git'
        version {
            name = version.name
            desc = 'Java client around Kentico Kontent Delivery REST API.'
            released = new Date()
            desc = version
            vcsTag = version
            gpg {
                sign = true
                passphrase = bintrayGpg
            }
        }
    }
}